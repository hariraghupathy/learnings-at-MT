Anonymous types and functions:

->Anonymous Types:
  ->Anonymous types provide an efficient way of storing read-only properties into a single object
  ->The main advantage is that we need not want to specify a type at first
  ->The type is generated by the compiler and not available at the source code level
  ->The type of each property is inferred by the compiler

->Creating anonymous types:
  ->we create anonymous types using the new operator
  ->Example:
    ->The following example shows an anonymous type that is initialized with two properties namely Amount and Message
     
    var v=new { Amount=108 , Message = "Hello" };
    Console.WriteLine(v.Amount + v.Message);  

    ->If we keep the mouse pointer over v.Amount and v.Message ,their inferred types by the compiler will be int and string

->When it is used:
   ->When we want to select two values from a collection using Linq,we have to get the entire list and then loop over it to get those two values alone
   ->if we have declared anonymous types ; what we do is get the needed values easily
   var productQuery = 
    from prod in products
    select new { prod.Color, prod.Price };



Anonymous Functions:
 
class Program  
    {  
        // Delegate Definition  
        delegate void operation();  
  
        static void Main(string[] args)  
        {  
            // Delegate instantiation  
            operation obj = delegate  
            {  
                Console.WriteLine("Anonymous method");  
            };  
            obj();  
   
            Console.ReadLine();  
        }  
    }  
        