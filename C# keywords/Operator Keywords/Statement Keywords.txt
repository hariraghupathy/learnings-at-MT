Statement Keywords:

1.Selection statements  
      ->if, else, switch, case
2.Iteration statements
      ->do, for, foreach, in, while
3.Jump statements
      ->break, continue, default, goto, return, yield

->yield keyword:
    ->Example:
       ->create a list with random numbers from 1 to 100
       ->our purpose will be to filter this list to get the numbers greater than 50 (without using any temporary list)
       ->first we create a list and add some elements to it
       ->Next we will create a method that will return an IEnumerator type
       ->This is the method where the elements would be iterated and the result will be filtered to get the list
       ->we will pass the main list to this method and get the results returned from this method
       ->Example:
     class Program
     {
        public static void Main(string[] args)
        {
            List<Int32> _lstData = new List<Int32>();
            List<Int32> lstToBeAdded = new List<Int32>() { 25, 22, 23, 56, 89, 90, 22 };
            _lstData.AddRange(lstToBeAdded);
            IEnumerable<Int32> _data = GetData(_lstData);
            foreach(var record in _data)
            {
                Console.WriteLine(record + Environment.NewLine);
            }
            Console.ReadKey();
        }

        public static IEnumerable<Int32> GetData(List<Int32> lstData)
        {
            foreach(var _id in lstData)
            {
                if (_id > 50)
                    yield return _id;
            }
        }
     }
       ->in the above example instead of creating a list and adding the filtered items to the list and then finally returning after completion,
         yield helps us in returning each element one by one to the caller once it encounters the filter condition , again it continues execution


4.Exception handling statements:
      ->throw, try-catch, try-finally, try-catch-finally

5.Checked and Unchecked:
     ->Fixed: 
          ->the fixed block helps us to prevent the garbage collector from relocating a movable variable
          ->it is permittable only in an unsafe context
          ->example:
class Point 
{ 
    public int x;
    public int y; 
}

unsafe private static void ModifyFixedStorage()
{
    // Variable pt is a managed variable, subject to garbage collection.
    Point pt = new Point();

    // Using fixed allows the address of pt members to be taken,
    // and "pins" pt so that it is not relocated.

    fixed (int* p = &pt.x)
    {
        *p = 1;
    }
}

      ->lock:
            The lock statement acquires the mutual-exclusion lock for a given object, executes a statement block, and then releases the lock. 
            While a lock is held, the thread that holds the lock can again acquire and release the lock.
            Any other thread is blocked from acquiring the lock and waits until the lock is released.
      ->Example:
lock (x)
{
    // Your code...
}


->checked:
            try
            {
                int ten = 10;
                int i2 = 2147483647 + ten;
                Console.WriteLine(i2);
                //this will result in overflow and display the result as -2,147,483,639
            }
            catch (Exception ex)
            {

            }
            ->to overcome this:
            try
            {
                int ten = 10;
                checked
                {
                    int i3 = 2147483647 + ten;
                    Console.WriteLine(i3);
                }
            }
            catch (Exception ex)
            {

            }
            ->now exception will be thrown as arithmetic operation resulted in an overflow
->unchecked:
     ->used to suppress the arithmetic overflow check
     ->opposite of checked block